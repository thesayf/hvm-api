# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo @model {
  id: ID!
  name: String!
  description: String
}

type CostOfLivingRanking {
  city: String!
  city_name: String!
  cityCountry: String!
  country: String!
  gross_rental_yield_outside_of_centre: Float!
  price_to_rent_ratio_outside_of_centre: Float!
  house_price_to_income_ratio: Float!
  affordability_index: Float!
  mortgage_as_percentage_of_income: Float!
  price_to_rent_ratio_city_centre: Float!
  gross_rental_yield_city_centre: Float!
  city_id: Int!
}

input CostOfLivingRankingInput {
  city: String!
  city_name: String!
  cityCountry: String!
  country: String!
  gross_rental_yield_outside_of_centre: Float!
  price_to_rent_ratio_outside_of_centre: Float!
  house_price_to_income_ratio: Float!
  affordability_index: Float!
  mortgage_as_percentage_of_income: Float!
  price_to_rent_ratio_city_centre: Float!
  gross_rental_yield_city_centre: Float!
  city_id: Int!
}

type CitiesPrice {
  country: String
  numbeoCityId: Int
  city: String
  usdPrices: [UsdPrice]
  currency: String
  contributors12months: Int
  monthLastUpdate: Int
  cityCountry: String!
  contributors: Int
  yearLastUpdate: Int
  prices: [Price]
}

input CitiesPriceInput {
  country: String
  numbeoCityId: Int
  city: String
  usdPrices: [UsdPriceInput]
  currency: String
  contributors12months: Int
  monthLastUpdate: Int
  cityCountry: String!
  contributors: Int
  yearLastUpdate: Int
  prices: [PriceInput]
}

type Price {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

input PriceInput {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

type UsdPrice {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

input UsdPriceInput {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

schema {
  query: Query
}

type Query {
  getCostOfLivingRanking(city: String!): CostOfLivingRanking
  listCostOfLivingRankings(limit: Int, nextToken: String): [CostOfLivingRanking]
  getCitiesPrice(cityCountry: String!): CitiesPrice
}

type Mutation {
  createCitiesPrice(input: CitiesPriceInput!): CitiesPrice
}