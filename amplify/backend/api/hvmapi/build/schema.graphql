
type Todo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CostOfLivingRanking {
  city: String!
  city_name: String!
  cityCountry: String!
  country: String!
  gross_rental_yield_outside_of_centre: Float!
  price_to_rent_ratio_outside_of_centre: Float!
  house_price_to_income_ratio: Float!
  affordability_index: Float!
  mortgage_as_percentage_of_income: Float!
  price_to_rent_ratio_city_centre: Float!
  gross_rental_yield_city_centre: Float!
  city_id: Int!
}

input CostOfLivingRankingInput {
  city: String!
  city_name: String!
  cityCountry: String!
  country: String!
  gross_rental_yield_outside_of_centre: Float!
  price_to_rent_ratio_outside_of_centre: Float!
  house_price_to_income_ratio: Float!
  affordability_index: Float!
  mortgage_as_percentage_of_income: Float!
  price_to_rent_ratio_city_centre: Float!
  gross_rental_yield_city_centre: Float!
  city_id: Int!
}

type CitiesPrice {
  country: String
  numbeoCityId: Int
  city: String
  usdPrices: [UsdPrice]
  currency: String
  contributors12months: Int
  monthLastUpdate: Int
  cityCountry: String!
  contributors: Int
  yearLastUpdate: Int
  prices: [Price]
}

input CitiesPriceInput {
  country: String
  numbeoCityId: Int
  city: String
  usdPrices: [UsdPriceInput]
  currency: String
  contributors12months: Int
  monthLastUpdate: Int
  cityCountry: String!
  contributors: Int
  yearLastUpdate: Int
  prices: [PriceInput]
}

type Price {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

input PriceInput {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

type UsdPrice {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

input UsdPriceInput {
  lowest_price: Float
  average_price: Float
  highest_price: Float
  data_points: Int
  item_name: String
  item_id: Int
}

type Query {
  getCostOfLivingRanking(city: String!): CostOfLivingRanking
  listCostOfLivingRankings(limit: Int, nextToken: String): [CostOfLivingRanking]
  getCitiesPrice(cityCountry: String!): CitiesPrice
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
}

type Mutation {
  createCitiesPrice(input: CitiesPriceInput!): CitiesPrice
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID!
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
}

type Subscription {
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"])
}

